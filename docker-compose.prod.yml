version: '3.8'

services:
  api:
    build:
      context: ./nanomed-NODEJS-API-v2
      dockerfile: Dockerfile
    container_name: nanomed-api-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - HOST=0.0.0.0
      - DB_SERVER=${DB_SERVER}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING}
      - AZURE_STORAGE_CONTAINER_NAME=${AZURE_STORAGE_CONTAINER_NAME}
      - TRANSBANK_COMMERCE_CODE=${TRANSBANK_COMMERCE_CODE}
      - TRANSBANK_API_KEY=${TRANSBANK_API_KEY}
      - TRANSBANK_ENVIRONMENT=${TRANSBANK_ENVIRONMENT}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
      - CLIENT_URL=${CLIENT_URL}
    networks:
      - nanomed-network
    depends_on:
      - db

  frontend:
    build:
      context: ./nanomed-v4-react-node-nextjs
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
        - NEXT_PUBLIC_CLIENT_URL=${NEXT_PUBLIC_CLIENT_URL}
    container_name: nanomed-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
      - NEXT_PUBLIC_CLIENT_URL=${NEXT_PUBLIC_CLIENT_URL}
    networks:
      - nanomed-network
    depends_on:
      - api

  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: nanomed-db-prod
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data_prod:/var/opt/mssql
      - ./nanomed-NODEJS-API-v2/EstucturaBDD.sql:/docker-entrypoint-initdb.d/EstucturaBDD.sql
    networks:
      - nanomed-network

  nginx:
    image: nginx:alpine
    container_name: nanomed-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - nanomed-network
    depends_on:
      - frontend
      - api

volumes:
  sqlserver_data_prod:

networks:
  nanomed-network:
    driver: bridge
